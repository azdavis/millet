{
  "scopeName": "source.sml",
  "patterns": [
    { "include": "#blockComment" },
    { "include": "#realWithPointAndMaybeExp" },
    { "include": "#realWithNoPointAndExp" },
    { "include": "#decInt" },
    { "include": "#hexInt" },
    { "include": "#decWord" },
    { "include": "#hexWord" },
    { "include": "#char" },
    { "include": "#string" },
    { "include": "#specialName" },
    { "include": "#symbolicName" },
    { "include": "#upperName" },
    { "include": "#commonBuiltinType" },
    { "include": "#controlKeyword" },
    { "include": "#otherKeyword" }
  ],
  "repository": {
    "blockComment": {
      "name": "comment.block.sml",
      "begin": "\\(\\*",
      "end": "\\*\\)",
      "patterns": [{ "include": "#blockComment" }]
    },
    "realWithPointAndMaybeExp": {
      "name": "constant.numeric.float.decimal.sml",
      "match": "(\\b|~)[0-9]+\\.[0-9]+([Ee]~?[0-9]+)?\\b"
    },
    "realWithNoPointAndExp": {
      "name": "constant.numeric.float.decimal.sml",
      "match": "(\\b|~)[0-9]+[Ee]~?[0-9]+\\b"
    },
    "decInt": {
      "name": "constant.numeric.integer.decimal.sml",
      "match": "(\\b|~)[0-9]+\\b"
    },
    "hexInt": {
      "name": "constant.numeric.integer.hexadecimal.sml",
      "match": "(\\b|~)0x[0-9A-Fa-f]+\\b"
    },
    "decWord": {
      "name": "constant.numeric.word.decimal.sml",
      "match": "\\b0w[0-9]+\\b"
    },
    "hexWord": {
      "name": "constant.numeric.word.hexadecimal.sml",
      "match": "\\b0wx[0-9A-Fa-f]+\\b"
    },
    "char": {
      "name": "string.quoted.double.sml",
      "begin": "#\"",
      "end": "\"",
      "patterns": [{ "include": "#escape" }]
    },
    "string": {
      "name": "string.quoted.double.sml",
      "begin": "\"",
      "end": "\"",
      "patterns": [{ "include": "#escape" }]
    },
    "escape": {
      "patterns": [
        { "include": "#simpleEscape" },
        { "include": "#upCaratEscape" },
        { "include": "#threeDigitEscape" },
        { "include": "#uEscape" }
      ]
    },
    "simpleEscape": {
      "name": "constant.character.escape.sml",
      "match": "\\\\[abtnvfr\\\\\"]"
    },
    "upCaratEscape": {
      "name": "constant.character.escape.sml",
      "match": "\\\\\\^[A-_]"
    },
    "threeDigitEscape": {
      "name": "constant.character.escape.sml",
      "match": "\\\\[0-9]{3}"
    },
    "uEscape": {
      "name": "constant.character.escape.sml",
      "match": "\\\\u[0-9A-Fa-f]{4}"
    },
    "specialName": {
      "name": "constant.language.sml",
      "match": "\\b(true|false|nil|ref|it)\\b"
    },
    "symbolicName": {
      "name": "keyword.operator.sml",
      "match": "[!%&\\$#\\+\\-/:<=>\\?@\\\\~`\\^\\|\\*]+"
    },
    "upperName": {
      "name": "entity.name.type.sml",
      "match": "\\b[A-Z][A-Za-z0-9_']*\\b"
    },
    "commonBuiltinType": {
      "name": "entity.name.type.sml",
      "match": "\\b(int|word|real|char|string|bool|unit|exn|list|option)\\b"
    },
    "controlKeyword": {
      "name": "keyword.control.sml",
      "match": "\\b(andalso|as|case|do|else|fn|handle|if|of|op|orelse|raise|then|while)\\b"
    },
    "otherKeyword": {
      "name": "keyword.other.sml",
      "match": "\\b(abstype|and|datatype|end|eqtype|exception|fun|functor|in|include|infix|infixr|let|local|nonfix|open|rec|sharing|sig|signature|struct|structure|type|val|where|with|withtype)\\b"
    }
  }
}
